;
; Implements reading of OV7670 video. One line at a time.
;

.program ov7670

;defines that we will later assert (in video.c) are the same as in pins.h
.define public pio_href_pin  13
.define public pio_vsync_pin 14
.define public pio_pclk_pin  15

    pull                        ; OSR set at startup to 239 (num rows)
                                ; Nothing else should touch OSR, so we can keep using it

.wrap_target
    wait 1 GPIO pio_vsync_pin   ; wait for vsync
have_vsync:
    mov y, OSR                  ; row, reading backwards, LCD update can invert it

wait_line:
    in y, 16                    ; first 16 bits of each row are the row number
    push block

    ; we want to read 320 pixels
    ; cannot set x directly, so abuse the ISR to buffer 3 nibbles (319 == 0x13F)
    mov isr, null
    set x, 0x01
    in x, 4
    set x, 0x03
    in x, 4
    set x, 0x0F
    in x, 4
    mov x, isr

    ; X is now 319

    wait 1 GPIO pio_href_pin     ; Wait for HREF to signal data is starting

pixel_read_320:
    ; Get a pixel (16 bits)

    wait 1 GPIO pio_pclk_pin
    in pins, 8                  ; 8 parallel pin bits
    wait 0 GPIO pio_pclk_pin    ; wait for end of pixel clock

    wait 1 GPIO pio_pclk_pin
    in pins, 8                  ; 8 parallel pin bits
    wait 0 GPIO pio_pclk_pin    ; wait for end of pixel clock

    push block

    jmp x-- pixel_read_320      ; Read 1 whole line

    jmp y-- wait_line           ; end of row?

    ; end of frame
.wrap


% c-sdk {
#include "hardware/clocks.h"

// Which state machine for which function?
const int sm_ov7670 = 0;

static inline void ov7670_program_load(PIO pio, uint pin_vsync, uint pin_data_base) {

    uint offset = pio_add_program(pio, &ov7670_program);
    pio_sm_config cfg = ov7670_program_get_default_config(offset);

    //OV7670 datasheet says typical speed is 24MHz for input clock
    //We are running XCLK at the correct rate, but we need the state machine faster to catch clock edges properly
    //So we have no divider
    sm_config_set_clkdiv(&cfg, 1);

    sm_config_set_in_pins(&cfg, pin_data_base);
    sm_config_set_jmp_pin(&cfg, pin_vsync);

    // Set the pin's GPIO function (connect PIO to the pad)
    pio_gpio_init(pio, pin_vsync);
    for (uint i=0; i<8; ++i) {
        pio_gpio_init(pio, pin_data_base+i);
    }

    // Word size and MSB/LSB
    sm_config_set_in_shift(&cfg,
            false,  // Shift-to-right = false (i.e. shift to left, aka. MSB first)
            false,  // autopush off: we need to abuse the ISR for math!
            16);    // bits per sample

    // Configure and start
    pio_sm_init(pio, sm_ov7670, offset, &cfg);
    pio_sm_clear_fifos(pio, sm_ov7670);

    //populate OSR for program to use (set value for max Rows)
    pio_sm_put_blocking(pio, sm_ov7670, 239);

    //start
    pio_sm_set_enabled(pio, sm_ov7670, true);
}

%}
